# the default properties file with keys for which we need mandatory defaults


########################### 0. global part ###############################

jpf.version = 4.1

# instances that are both search and VM listeners
#jpf.listener = ..

# do we want JPF exceptions to print their stack traces (that's only for
# debugging)
jpf.print_exception_stack = true


# this is usually used in class path specs from mode property files
# (for expanded strings)
jpf.basedir = ../javapathfinder-trunk-svn

# this is where we can specify additional classpath entries that are
# not in the system property class.path (e.g. when running JPF from
# an environment that uses it's own loaders, like Eclipse plugins etc.)
#jpf.native_classpath = ../javapathfinder-trunk-svn/build/jpf

########################### 1. Search part ###############################
search.class = gov.nasa.jpf.search.DFSearch

# in case this is a HeuristicSearch, we have to specify the Heuristic class to use
search.heuristic.class = gov.nasa.jpf.search.heuristic.BFSHeuristic


# This flag indicates whether state matching will only be done when a state
# is revisited at a lower depth. By default this is false. If it is set to
# true and no error is found in a limited-depth search then it is guaranteed
# not to have such error below that depth. Note that for traditional
# depth limited search this does not hold
search.match_depth = false

# This flag indicates whether JPF should produce more than one error
# or stop at the first one
search.multiple_errors = false

# the minimum free memory bounds. If we fall below that threshold, we
# stop the search
search.min_free = 1M

# name of the file in which we store error paths. If not set, we don't store
#search.error_path = error.xml

# the standard properties we want to check for
search.properties=\
gov.nasa.jpf.jvm.NotDeadlockedProperty,\
gov.nasa.jpf.jvm.NoUncaughtExceptionsProperty

##########################################################################
# various heuristic parameters

# This number specifies the maximum number of states to keep on the queue
# during a heuristic search. By default it is set to -1
search.heuristic.queue_limit = -1

# This flag indicates whether branches with counts less than branch-start
# are to be ranked according to how many times they have been taken.
# It is set to true by default. If it is set to false, they are all valued
# the same
search.heuristic.branch.count_early = true

# This number determines at what point branches are heuristically valued as worse
# than non-branching transitions. By default this value is 1.
branch_start = 1


# This number if greater than 0 is returned as the heuristic value for
# non-branching transitions. By default it is set to -1 in which case the
# value of branch-start is returned instead
search.heuristic.branch.no_branch_return = -1

# exclusive search listeners
# search.listener =

##########################################################################
############################### 2. VM part ###############################
vm.class = gov.nasa.jpf.jvm.JVM

# class used to hash/store states (if not set, states are not matched)
vm.storage.class = gov.nasa.jpf.jvm.JenkinsStateSet

# class used to maintain the backtrack stack
vm.backtracker.class = gov.nasa.jpf.jvm.DefaultBacktracker

# serializer to be used by state set (vm.storage.class)
#vm.serializer.class = gov.nasa.jpf.jvm.CollapsingSerializer
vm.serializer.class = gov.nasa.jpf.jvm.abstraction.filter.FilteringSerializer

# the class that models static fields and classes
vm.static_area.class = gov.nasa.jpf.jvm.StaticArea

# the class that models the heap
vm.dynamic_area.class = gov.nasa.jpf.jvm.DynamicArea

# restorer to be used by backtracker such as DefaultBacktracker UNLESS a
# serializer that is also a restorer (such as CollapsingSerializer) is used.
# I.e. this is only read if serializer is not used or it's not a StateRestorer
vm.restorer.class = gov.nasa.jpf.jvm.CollapsingRestorer

# instruction factory
vm.insn_factory.class = gov.nasa.jpf.jvm.DefaultInstructionFactory

# fields factory
vm.fields_factory.class = gov.nasa.jpf.jvm.DefaultFieldsFactory

# class used to set method and field attributes at class load time
vm.attributor.class = gov.nasa.jpf.jvm.DefaultAttributor

# the next two are used to load classes into JPF which are NOT in the normal classpath
# (we can use the automatic defaults if started from the JPF root dir)
# where to load essential system model classes from (like java.lang.Thread)
vm.bootclasspath = ../javapathfinder-trunk-svn/build/env/jpf

# LSP checker boot libraries
vm.bootclasspath+= ,./lib

# where to load application specific classes from
vm.classpath = build/classes

# LSP checker libraries
vm.classpath+= ,./lib

# where do we look for sources (defaults assume we start in the JPF root dir)
vm.sourcepath = ${jpf.basedir}/src,${jpf.basedir}/examples,${jpf.basedir}/test

# this is an ordered list of packages we try to locate native peers.
# "<model>" means JPF tries the same package like the model class
# "<defaul" means no package at all
vm.peer.packages = <model>,gov.nasa.jpf.jvm,<default>

# pattern list for assertion enabled classes
vm.enable_assertions = *

# is Verify.assertTrue() a step boundary? <2do> - go away - should be unified with POR
vm.visible_asserts = false

# do we support the Verify.ignorePath() API (to imperatively ignore paths in modeled/instrumented programs)?
vm.verify.ignore_path = true

# do we want on-the-fly partial order reduction?
vm.por = true

# do we treat field access of objects that are reachable from different threads as
# transaction boundaries (in case there is more tha one thread)?
vm.por.field_boundaries = true

# access to fields with these patterns we never treat as transition boundaries
vm.por.field_boundaries.never = java.*,javax.*,sun.*

# access to fields with these patterns we break on (if object is shared and
# vm.por.field_boundaries is set - note it's only meaningful if sync_detection
# is set because otherwse we would break anyways)
vm.por.field_boundaries.break =

# do we try to deduce if a field is supposed to be protected by a lock? In this
# case, we stop to treat this field as a boundary step, but only if we see the lock
vm.por.sync_detection = true

# used to detect if a field is lock protected - only required if we use on-the-fly POR
# with sync-detection
vm.por.fli_factory.class = gov.nasa.jpf.jvm.StatisticFieldLockInfoFactory


# do we assume final fields to be race-safe (not really true, esp. for
# instance fields with references leaking from a ctor, but a good starting point)
vm.por.skip_finals=true

# do we reclaim unused memory (run garbage collection)
vm.gc = true

# threshold after which number of allocations to perform a garbage collection
# (even within the same transition, to avoid lots of short living objects)
vm.max_alloc_gc = 500

# do we run finalizers on collected objects (only makes sense with garbage collection)
vm.finalize = true

# do we want to halt execution on each throw of an exception that matches
# one of the given prefixes, w/o looking for exception handlers?
# (useful for empty handler blocks, over-permissive catches or generally
# misused exceptions)
#vm.halt_on_throw = any

# class that is used to create scheduling relevant choice generators.
# this will replace the scheduler
vm.scheduler_factory.class = gov.nasa.jpf.jvm.DefaultSchedulerFactory

# print output as it is generated during the search (for all paths)
vm.tree_output = true

# do we want to store the whole path no matter if we report them
vm.store_steps=false

# untracked property
vm.untracked = true

############################### 3. CG part ###############################

# do we want the order of choices randomized?
cg.randomize_choices = false

# default BooleanChoiceGenerator sequence: do we start with 'false'
cg.boolean.false_first = true

# do we want java.util.Random. nextXX() enumerate choices, or just return a single value?
# (isn't implemented for all types yet)
cg.enumerate_random=false

# maximum number of processors returned by Runtime.availableProcessors(). If this is
# greater than 1, the call represents a ChoiceGenerator
cg.max_processors=1

# do all Thread APIs should potentially have CGs, or do we ignore certain
# types like sleep() or yield()?
cg.threads.break_all=false

############################### 3. Report Part ###############################
log.handler.class=gov.nasa.jpf.util.LogHandler

# Windows seem to have a different default
log.level=severe

jpf.report.class=gov.nasa.jpf.report.Reporter
jpf.report.publisher=console

jpf.report.console.class=gov.nasa.jpf.report.ConsolePublisher

# this prints out repository information if the 'jpf' topic is set (for debugging)
#jpf.report.show_repository=true

#property violation reporting is configured separately
jpf.report.console.start=jpf,sut

jpf.report.console.transition=
jpf.report.console.constraint=constraint

jpf.report.console.property_violation=error,trace,snapshot
jpf.report.console.show_steps=true
jpf.report.console.show_method=true
jpf.report.console.show_code=false

jpf.report.console.finished=result,statistics

#jpf.report.console.show_steps=true
#jpf.report.console.show_method=true
#jpf.report.console.show_code=true

jpf.report.xml.class=gov.nasa.jpf.report.XMLPublisher

jpf.report.html.class=gov.nasa.jpf.report.HTMLPublisher
jpf.report.html.start=jpf,sut,platform,user,dtg,config
jpf.report.html.constraint=constraint
jpf.report.html.property_violation=
jpf.report.html.finished=result,statistics,error,snapshot,output

############################### 4. Listener part #############################

# imperative list of listeners
#jpf.listener=

jpf.listener.autoload=\
  gov.nasa.jpf.NonNull,\
  gov.nasa.jpf.Const

jpf.listener.gov.nasa.jpf.NonNull=gov.nasa.jpf.tools.NonNullChecker
jpf.listener.gov.nasa.jpf.Const=gov.nasa.jpf.tools.ConstChecker
